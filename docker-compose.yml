services:
  mysqldb:
    image: mysql:5.7
    restart: unless-stopped
    env_file: ./.env
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD=1
      - MYSQL_DATABASE=alinfo
    ports:
      - ${MYSQLDB_LOCAL_PORT}:${MYSQLDB_DOCKER_PORT}
    volumes:
      - db:/var/lib/mysql
    networks:
      - projectdevops

  appspring:
    depends_on:
      - mysqldb
    image: oussema619/tp_achat_devops:${APP_VERSION} # Use dynamic tag
    container_name: springapp
    restart: on-failure
    env_file: ./.env
    ports:
      - 8082:8082
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.datasource.url"  : "jdbc:mysql://mysqldb:${MYSQLDB_DOCKER_PORT}/alinfo?useSSL=false",
        "spring.datasource.username" : "${MYSQLDB_USER}",
        "spring.datasource.password" : "${MYSQLDB_ROOT_PASSWORD}",
        "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.MySQL5InnoDBDialect",
        "spring.jpa.hibernate.ddl-auto" : "update"}'
    volumes:
      - .m2:/root/.m2
    stdin_open: true
    tty: true
    networks:
      - projectdevops

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    ports:
      - 3000:3000
    networks:
      - projectdevops

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    ports:
      - 9090:9090
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - projectdevops

  nexus:
    image: sonatype/nexus3
    container_name: nexus
    restart: unless-stopped
    ports:
      - 8081:8081
    networks:
      - projectdevops

  # sonarqube:
  #   image: sonarqube
  #   container_name: sonarqube
  #   restart: unless-stopped
  #   environment:
  #     - SONAR_JDBC_URL=jdbc:postgresql://mysqldb/sonarqube
  #     - SONAR_JDBC_USERNAME=sonar
  #     - SONAR_JDBC_PASSWORD=sonar
  #   ports:
  #     - 9000:9000
  #   networks:
  #     - projectdevops

volumes:
  db:

networks:
  projectdevops:
